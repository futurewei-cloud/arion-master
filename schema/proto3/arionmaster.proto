/*
MIT License
Copyright(c) 2022 Futurewei Cloud

    Permission is hereby granted,
    free of charge, to any person obtaining a copy of this software and associated documentation files(the "Software"), to deal in the Software without restriction,
    including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and / or sell copies of the Software, and to permit persons
    to whom the Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

syntax = "proto3";

package arion.schema;

option java_package = "com.futurewei.arion.schema";

import "common.proto";

service ArionMasterService {
  rpc RequestGoalstates (HostRequest) returns (NeighborRulesResponse) {
  }

  rpc RequestGoalstateStream (stream HostRequest) returns (stream NeighborRulesResponse) {
  }
}

service Watch {

  rpc Watch (stream ArionWingRequest) returns (stream NeighborRule) {
  }
}

message ArionWingRequest {
  string vni = 1;
  string ip = 2;
  uint64 rev = 3;
  string group = 4;
}



message NeighborRule {
  OperationType operation_type = 1;

  string ip = 2;
  string hostip = 3;
  string mac = 4;
  uint32 tunnel_id = 5;
  string hostmac = 6;
  string arionwing_group = 7;
  uint64 version = 8;
}

message NeighborRulesResponse {
  uint32 format_version = 1;

  message NeighborRuleReply {
    string request_id = 1;
    NeighborRule neighborrule = 2;
  }
  repeated NeighborRuleReply neighborrules = 2;
}

message HostRequest {
  uint32 format_version = 1;

  message ResourceStateRequest {
    RequestType request_type = 1;
    string request_id = 2; // UUID generated Arion Wing
    uint32 tunnel_id = 3;
    string source_ip = 4;
    uint32 source_port = 5;
    string destination_ip = 6;
    uint32 destination_port = 7;
    EtherType ethertype = 8;
    Protocol protocol = 9;
  }

  repeated ResourceStateRequest state_requests = 2;
}

message GoalStateOperationReply {
  uint32 format_version = 1;

  message GoalStateOperationStatus {
    string resource_id = 1;
    ResourceType resource_type = 2;
    OperationType operation_type = 3;
    OperationStatus operation_status = 4;
    uint32 dataplane_programming_time = 5;
    uint32 network_configuration_time = 6;
    uint32 state_elapse_time = 7;
  }

  repeated GoalStateOperationStatus operation_statuses = 2;

  // Total operation time (in microseconds)
  //    1. to process the message (consisting of multiple operations)
  //    2. to program data plane
  // Note: The list of operation_statuses details the time spent at each operation
  uint32 message_total_operation_time = 3;
}